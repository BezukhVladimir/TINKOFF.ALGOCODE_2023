Вопрос 1
На лекции мы обсуждали, как сделать собственный компаратор для сортировки.

def compare(a, b):
    return a - b

Такой компаратор сравнивает два элемента в массиве, а значит, сортировка с таким компаратором не может работать быстрее, чем O(n log n)
Представьте себе, что вы пишете сортировку подсчетом и хотите подготовить для нее собственный "компаратор". Кратко опишите, что такой компаратор должен принимать, что возвращать, и на каком этапе сортировки он будет вызываться. Если есть возможность, приведите пример того, как компаратор будет реализован в случае, если мы сортируем студентов (класс Student) по номеру группы (поле group).

Ответ 1
Для реализации алгоритма ориентировался на эту документацию:
https://neerc.ifmo.ru/wiki/index.php?title=Сортировка_подсчётом

Достаточно подсчитывать количество вхождений нужного ключа. С этим справляется оператор равенства.

Что-то в этом роде:
// bool operator == ( const int &lhs, const int &rhs) {
//     return !(lhs - rhs);
// }  

#include <string>
#include <random>
#include <iostream>
#include <algorithm>

using namespace std;

const int MAX_VALUE = 10;
random_device dev;
mt19937 rng(dev());
uniform_int_distribution<mt19937::result_type> number(0, MAX_VALUE);

struct Student {
    string name;
    int group;
    
    Student() {
        name = "";
        group = -1;
    }
    
    void init() {
        name = "default";
        group = number(rng);
    }
};

void print(const Student students[], const int &size) {
    for (int i = 0; i < size; ++i)
        cout << students[i].group << ' ';
}

void countingSort(const Student students[],
                                Student students_sorted_by_group[], const int &size) {
    int counters[MAX_VALUE + 1];
    for (int i = 0; i <= MAX_VALUE; ++i)
        counters[i] = 0;
    
    for (int i = 0; i < size; ++i)
        ++counters[students[i].group];
        
    int carry = 0;
    for (int i = 0; i <= MAX_VALUE; ++i) {
        int t = counters[i];
        counters[i] = carry;
        carry += t;
    }
    
    for (int i = 0; i < size; ++i) {
        students_sorted_by_group[counters[students[i].group]] = students[i];
        ++counters[students[i].group];
    }
}

int main()
{
    const int n = 50;
    Student students[n];
    Student students_sorted_by_group[n]; 
    
    for (int i = 0; i < n; ++i)
        students[i].init();
    
    print(students, n);
    cout << endl;

    countingSort(students, students_sorted_by_group, n);
     
    print(students_sorted_by_group, n);
}

Вопрос 2
Предположим, вы решили вопрос 1 и научились сортировать студентов методом подсчета. А как сделать такую сортировку стабильной?

Ответ 2
Предложенная в вопросе 1 реализация является стабильной.

Это достигается за счёт следующих соображений:
- находим индексы первых элементов из каждой группы отсортированных элементов в результирующем массиве;
- переносим объекты в изначальном порядке из исходного массива.

//
    // подсчёт ключей
    for (int i = 0; i < size; ++i)
        ++counters[students[i].group];
    
    // поиск индексов первых элементов
    int carry = 0;
    for (int i = 0; i <= MAX_VALUE; ++i) {
        int t = counters[i];
        counters[i] = carry;
        carry += t;
    }
    
    // наполнение результирующего массива
    for (int i = 0; i < size; ++i) {
        students_sorted_by_group[counters[students[i].group]] = students[i];
        ++counters[students[i].group];
    }

Вопрос 3
В сортировке слиянием для оценки асимптотики мы использовали идею, что если T(n) = 2T(n/2) + O(n), то T(n) = O(n log n).

А если бы мы делили массив на 3 части, рекурсивно сортировали бы каждую, а затем делали слияние трех массивов? (такое слияние, кстати, можно сделать за O(n), проверьте, что вы понимаете, почему). Какое бы тогда время работы получилось? Сравните эту асимптотику с нижней оценкой на сложность алгоритма сортировки O(n log n). Подсказка-напоминалка: O(c * n log n) = O(n log n)

Ответ 3
T(n) = 3T(n / 3) + O(n)

n 
--
n / 3
n / 3
n / 3
--
n / 3^k
n / 3^k
n / 3^k

T(n) = O(n * k)

n / (3 ^ k) = 1
k = log_3 (n)

T(n) = O(n * log_3(n))
--

O(n * log_2(n)) V O(n * log_3(n))
O(n * log_2(n)) V O(n * log_2^(log_2(3))(n))
O(n * log(n)) > O((1 / log(3)) * n * log(n))
